'use strict';

import {LitElement, html} from '@polymer/lit-element';
// I couldn't figure out a way to import countdown.js as an es6 module
// so anything that uses <count-down> needs to include the script in their html page.
// See the index.html demo page for an example.

class CountDown extends LitElement {

  static get properties() {
    return {
      to: Date,
      countdownHTML: String
    }
  }

  constructor() {
    super();
    this.expired = false;
    this.timerId = null;
  }

  _shouldRender(props, changedProps, prevProps) {
    // If the to date has changed, start/restart the countdown
    if(changedProps && "to" in changedProps) {
      if (this.timerId) {
        window.clearInterval(this.timerId);
      }
      // Wait for the render to complete before we change another property (countdownHTML)
      // as recommended by the lit-element warning.
      // This currently works but logs an error in the console:
      // https://github.com/uhawaii-system-its-mis-components/count-down/issues/1
      this.renderComplete.then(function(result) {
        this.timerId = countdown(
                        this.to,
                        this._countdownCallback.bind(this),
                        countdown.HOURS | countdown.MINUTES | countdown.SECONDS
        );
      }.bind(this));
    }
    // Only render for changes to countdownHTML
    return changedProps && "countdownHTML" in changedProps;
  }

  _render({countdownHTML}) {
    return html`
      ${countdownHTML}
    `;
  }

  _countdownCallback(ts) {
    if (this.to <= new Date()) {
      window.clearInterval(this.timerId);
      this.expired = true;
      this.countdownHTML = 'Expired';
      return;
    }
    this.countdownHTML = ts.toString();
  }

}
customElements.define('count-down', CountDown);
